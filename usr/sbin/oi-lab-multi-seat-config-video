#!/usr/bin/python3
# -*- coding: utf-8 -*-

import re
from sys import argv, stdout

# Logging modules
import logging
from systemd.journal import JournalHandler

# Udev device handling modules
import pyudev

# DBus modules (for communication with systemd-logind)
from pydbus import SystemBus

MAX_SEAT_COUNT = 5
XORG_CONF_DIR = '/etc/X11/xorg.conf.d'

bus = SystemBus()
logind = bus.get('.login1')
systemd = bus.get('.systemd1')

logger = logging.getLogger(argv[0])
logger.setLevel(logging.INFO)
logger.propagate = False
stdout_handler = logging.StreamHandler(stdout)
formatter = logging.Formatter(
    '%(asctime)s %(name)s[%(process)s] %(levelname)s %(message)s')
stdout_handler.setFormatter(formatter)
logger.addHandler(stdout_handler)
logger.addHandler(JournalHandler())


def update_file(file_path, new_data):
    try:
        with open(file_path, 'r') as read_file:
            old_data = read_file.read()

        if new_data != old_data:
            with open(file_path, 'w') as write_file:
                write_file.write(new_data)
    except FileNotFoundError:
        with open(file_path, 'w+') as new_file:
            new_file.write(new_data)


class SeatNodelessDevice:
    def __init__(self, device):
        self.device_path = device.device_path
        self.sys_path = device.sys_path
        self.sys_name = device.sys_name
        self.seat_name = device.get('ID_SEAT')

        parent = device.find_parent('pci')
        self.pci_slot = (parent.properties['PCI_SLOT_NAME'].lstrip('0000:')
                         if parent is not None else None)

    def attach_to_seat(self, seat_name):
        try:
            logind.AttachDevice(seat_name, self.sys_path, False)
            logger.info('Device %s successfully attached to seat %s',
                        self.sys_path, seat_name)
        except Exception as error:
            logger.error('Failed to attach device %s to seat %s!',
                         self.sys_path, seat_name)
            logger.error(error)


class SeatDevice(SeatNodelessDevice):
    def __init__(self, device):
        super().__init__(device)
        self.device_node = device.device_node


class SeatKMSVideoDevice(SeatDevice):
    def __init__(self, fb, drm):
        super().__init__(fb)
        self.drm = [SeatDevice(d) for d in drm]

    def attach_to_seat(self, seat_name):
        # Attach the framebuffer device node
        super().attach_to_seat(seat_name)

        for node in self.drm:
            # Attach all other DRM device nodes as well
            node.attach_to_seat(seat_name)


class SeatSM501VideoDevice(SeatNodelessDevice):
    def __init__(self, device):
        def pci_format(pci_slot, delimiter=''):
            return re.sub(r'\.|:', delimiter, pci_slot)

        super().__init__(device)
        self.output = device.get('SM501_OUTPUT')
        self.display_number = int(pci_format(self.pci_slot), base=16)
        seat_address = pci_format(self.pci_slot, '-')
        xorg_address = pci_format(self.pci_slot, ':')
        file_path = f'{XORG_CONF_DIR}/21-oi-lab-sm501-{seat_address}.conf'
        new_config_data = f"""Section "Device"
    MatchSeat "__fake-seat-{self.display_number}__"
    Identifier "Silicon Motion SM501 Video Card {self.pci_slot}"
    BusID "PCI:{xorg_address}"
    Driver "siliconmotion"
    Option "PanelSize" "1360x768"
    Option "Dualhead" "true"
    Option "monitor-LVDS" "Left Monitor"
    Option "monitor-VGA" "Right Monitor"
EndSection

Section "Screen"
    MatchSeat "__fake-seat-{self.display_number}__"
    Identifier "Silicon Motion SM501 Screen {self.pci_slot}"
    Device "Silicon Motion SM501 Video Card {self.pci_slot}"
    DefaultDepth 16
EndSection
"""
        update_file(file_path, new_config_data)

        # Enable permanently this socket unit, since it will be needed
        # even after multi-seat is configured.
        socket_unit = f'oi-lab-xorg-daemon@{self.display_number}.socket'
        systemd.EnableUnitFiles([socket_unit], False, True)

    def attach_to_seat(self, seat_name):
        super().attach_to_seat(seat_name)
        file_path = f'{XORG_CONF_DIR}/22-oi-lab-nested-{seat_name}.conf'
        new_config_data = f"""Section "Device"
    MatchSeat "{seat_name}"
    Identifier "Nested Device {self.pci_slot}"
    Driver "nested"
    Option "Display" ":{self.display_number}"
EndSection

Section "Screen"
    MatchSeat "{seat_name}"
    Identifier "Nested Screen {self.output} {self.pci_slot}"
    Device "Nested Device {self.pci_slot}"
    DefaultDepth 16
    Option "Output" "{self.output}"
EndSection
"""
        update_file(file_path, new_config_data)


def scan_kms_video_devices(context):
    drms = context.list_devices(subsystem='drm')
    fbs = context.list_devices(subsystem='graphics')
    devices = [(fb,
                [drm
                 for drm in drms
                 if drm.parent == fb.parent and drm.device_node is not None])
               for fb in fbs
               if fb.device_node is not None]
    return [SeatKMSVideoDevice(*device) for device in devices]


def scan_sm501_video_devices(context):
    devices = context.list_devices(subsystem='platform', tag='master-of-seat')
    return [SeatSM501VideoDevice(device) for device in devices]


def main():
    context = pyudev.Context()
    kms_video_devices = scan_kms_video_devices(context)
    sm501_video_devices = scan_sm501_video_devices(context)

    for device in kms_video_devices:
        logger.info('KMS video detected: %s -> %s',
                    device.device_node, device.sys_path)

        for drm in device.drm:
            logger.info('>>> DRM node detected: %s -> %s',
                        drm.device_node, drm.sys_path)

    for device in sm501_video_devices:
        logger.info('SM501 video detected: %s', device.sys_path)

    video_devices = kms_video_devices + sm501_video_devices

    # The total number of configrable seats is limited by
    # the availability of video devices, excluding /dev/fb0
    # (we'll reserve it for seat0).
    num_configurable_seats = min(MAX_SEAT_COUNT, len(video_devices)) - 1

    if num_configurable_seats > 0:
        for (index, video_device) in enumerate(video_devices[1:]):
            video_device.attach_to_seat(f'seat-{index+1}')


if __name__ == '__main__':
    main()
