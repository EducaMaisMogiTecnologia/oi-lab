#!/bin/bash

# Copyright (C) 2017 Centro de Computacao Cientifica e Software Livre
# Departamento de Informatica - Universidade Federal do Parana - C3SL/UFPR
#
# This file is part of le-multiterminal
#
# le-multiterminal is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

#### Description: Prepares the environment and launches the seat configuration scripts.
#### Xorg that communicates with the Thinnetworks card (fake-seat) should already be running.
#### Written by: Stephanie Briere Americo - sba16@c3sl.inf.ufpr.br on 2017.
#### Modified by: LaÃ©rcio de Sousa - laerciosousa@sme-mogidascruzes.sp.gov.br on 2018.

#set -x

## Path constants
MC3SL_DEVICES="/usr/sbin/devices" # shortcut to devices that have already been paired

## Script/function in other file
FIND_KEYBOARD="find_keyboard" # "find-devices"
CREATE_WINDOW="create_window" # "window-access"
WRITE_WINDOW="write_window" # "window-access"

## Macros
FAKE_DISPLAYS=( :90 :91 ) # display to access fake-seat (secondary card)
OUTPUTS=( LVDS VGA ) # output options
SEAT_NAMES=( seat-sm501-0-lvds seat-sm501-0-vga seat-sm501-1-lvds seat-sm501-1-vga ) # secondary seat names
MAX_ATTEMPTS=100

## Variables
WINDOW_ID_INIT=0 # if the onboard board, the start is 0; otherwise it is 1
WINDOW_COUNTER=0 # how many windows were created
N_SEATS_LISTED=0 # how many seats are there in the system
ONBOARD=0 # if the onboard is connected
declare -a DISPLAY_XORGS # saves the display of the Xorg launched processes
declare -a ID_WINDOWS # saves the created window ids (used in window-access)
declare -a PID_FIND_DEVICES # saves the pid from the launched configuration processes

# FIXME: Find a better way to enumerate seat master devices (not restricted to this SM501 case).
#        For a graphics card with well-supported KMS driver,
#        enumerating /dev/fb* devices should be enough.
SECONDARY_SEATS=( $(find /sys/devices -name "sm501-[fb|usb]*" | sort) )

## Auxiliary scripts
source /usr/share/oi-lab-multi-seat-config/find-devices
source /usr/share/oi-lab-multi-seat-config/window-access

create_onboard_window () {
	# Checks if there is a device connected to the onboard card
	if test "$(cat "/sys$(udevadm info /sys/class/drm/card0 | grep "P:" | cut -d " " -f2)/card0-VGA-1/status")" == "connected"; then
		# Runs Xorg and creates the window for the onboard card
		DISPLAY_XORGS[$WINDOW_COUNTER]=:$(($WINDOW_COUNTER+10))
		export DISPLAY=${DISPLAY_XORGS[$WINDOW_COUNTER]}

#		Xorg ${DISPLAY_XORGS[$WINDOW_COUNTER]} -noreset &
#		pid=$!

		# Guarantees the Xorg execution
#		xdpyinfo -display ${DISPLAY_XORGS[$WINDOW_COUNTER]}
#		EXIT_CODE=$?
#		N_ATTEMPT=0
#		while test $EXIT_CODE -ne 0; do
#			sleep 0.5
#			xdpyinfo -display ${DISPLAY_XORGS[$WINDOW_COUNTER]}
#			EXIT_CODE=$?
#			if ! kill -0 "${pid}" >/dev/null 2>&1; then
#				Xorg ${DISPLAY_XORGS[$WINDOW_COUNTER]} &
#				pid=$!
#			fi
#
#			if test $N_ATTEMPT -gt $MAX_ATTEMPTS; then
#				echo "[Error] Run Xorg ${DISPLAY_XORGS[$WINDOW_COUNTER]} failed."
#				exit 1
#	    fi
#
#			N_ATTEMPT=$(($N_ATTEMPT+1))
#		done

		$CREATE_WINDOW primary

		ONBOARD=1
	else
		WINDOW_ID_INIT=1
		WINDOW_COUNTER=1
	fi
}

create_secondary_card_windows () {
	#### $1: fake seat display
	for i in ${OUTPUTS[@]}; do
		# Display for each output
		DISPLAY_XORGS[$WINDOW_COUNTER]=${FAKE_DISPLAYS[$1]}
		export DISPLAY=${FAKE_DISPLAYS[$1]}

		# Guarantees the Xorg-daemon execution
#		xdpyinfo -display ${DISPLAY_XORGS[$WINDOW_COUNTER]}
#		EXIT_CODE=$?
#		N_ATTEMPT=0
#		while test $EXIT_CODE -ne 0; do
#			sleep 0.5
#			xdpyinfo -display ${DISPLAY_XORGS[$WINDOW_COUNTER]}
#			EXIT_CODE=$?
#
#			if test $N_ATTEMPT -gt $MAX_ATTEMPTS; then
#				echo "[Error] Communication with Xorg ${DISPLAY_XORGS[$WINDOW_COUNTER]} failed."
#				exit 1
#			fi
#
#			N_ATTEMPT=$(( N_ATTEMPT + 1 ))
#		done

		# Run config window to type in this output
		$CREATE_WINDOW $i
	done
}

configure_devices () {
	COUNT=0
	for WINDOW in `seq $WINDOW_ID_INIT $(($WINDOW_COUNTER-1))`; do
		if test $WINDOW -eq 0; then
			$WRITE_WINDOW ok $WINDOW
		else
			$FIND_KEYBOARD $WINDOW &
			PID_FIND_DEVICES[$COUNT]=$!
			COUNT=$(($COUNT+1))

			$WRITE_WINDOW press_key $WINDOW
		fi
	done
}

kill_jobs () {
	if test -n "$(ls | grep lock)"; then
		rm lock*
	fi

	if test -n "$(ls $MC3SL_DEVICES)"; then
		rm -rf $MC3SL_DEVICES/
	fi

	rm -rf $MC3SL_DEVICES

	pkill -P $$
}

############ BEGIN ############

#xdpyinfo -display $FAKE_DISPLAY
#EXIT_CODE=$?
#N_ATTEMPT=0
#while test $EXIT_CODE -ne 0; do
#	sleep 0.5
#	xdpyinfo -display $FAKE_DISPLAY
#	EXIT_CODE=$?
#
#	if test $N_ATTEMPT -gt $MAX_ATTEMPTS; then
#		echo "[Error] xdpyinfo -display $FAKE_DISPLAY failed."
#		exit 1
#	fi
#
#	N_ATTEMPT=$(($N_ATTEMPT+1))
#done

udevadm trigger
udevadm settle --timeout=10

# If the onboard is connected, it creates a window to write on the screen
create_onboard_window

# Creates the necessary windows to write on the screen of each output of the secondary card
create_secondary_card_windows 0

if test ${#SECONDARY_SEATS[@]} -gt 2; then
	create_secondary_card_windows 1
fi

# We'll use it to save a shortcut to devices that have already been paired
mkdir -p $MC3SL_DEVICES

# Run configuration script for each seat
configure_devices

# Wait until all seats are configured
N_SEATS_LISTED=$(( ${#SECONDARY_SEATS[@]} + ONBOARD ))
N_CONFIGURABLE_SEATS=${N_SEATS_LISTED}
# Assume that seat0 is already pre-configured.
CONFIGURED_SEATS=1

KEYBOARDS=( $(oi-lab-multi-seat-config-detect-keyboard) )
N_KEYBOARDS_LISTED=${#KEYBOARDS[@]}

# If there are less connected keyboards than available seat master devices,
# leave remaining seat master devices unconfigured.
if test $N_KEYBOARDS_LISTED -lt $N_SEATS_LISTED; then
	N_CONFIGURABLE_SEATS=${N_KEYBOARDS_LISTED}
fi

while test $CONFIGURED_SEATS -lt $N_CONFIGURABLE_SEATS; do
	wait -n ${PID_FIND_DEVICES[@]}
	EXIT_CODE=$?

	if test $EXIT_CODE -eq 0; then
		CONFIGURED_SEATS=$(( CONFIGURED_SEATS + 1 ))
	elif test $EXIT_CODE -eq 2; then
		echo "[Error] Can not configure output: find-devices failed."
		exit 1
	fi
done

# Cleans the system by killing all the processes and files it has created
kill_jobs

systemctl stop oi-lab-multi-seat-config-xorg@10.service

exit 0
